# EYELINK 1000 PLUS DATA.INI FILE
# Created: August 28, 2013

# *** WARNING: DO NOT MODIFY THIS FILE DIRECTLY!!! PLEASE CUT AND PASTE   ***
# *** SELECTED COMMANDS TO FINAL.INI AND MAKE MODIFICATIONS IN THAT FILE! ***
# NOTE: some settings may be overridden by LASTRUN.INI

// This file controls general sample and event data writing
// to both file and link.
// It also controls data file specific controls.
//
// This file is used to control overall data output to file and link,
// and to set special file data formats


// DATA FILE DESTINATION DIRECTORY

	## data_drive_name <dir>
    ;; Identifier for drive (or partition) for data files
    ;; this can be a volume name (usually "DATA"
    ;; or a drive specifier such as "C:\"
data_drive_name = "."

	## data_drive_directory <dir>
    ;; The path within the data drive for data files.
    ;; This is only used if the drive specified.
    ;; This will be created if it does not exist.
data_drive_directory = "../data"

	## data_file_path <dir>
    ;; If the two previous options failed, this path
    ;; will be used. If ".", uses current directory
data_file_path = "."

// DISK SPACE CHECK AT STARTUP

	## required_disk_space <size> <min>
	;; disk space in megabytes to check at startup
	;; optional second parameter is minimum space to allow file open (default 2 MB)
required_disk_space = 2048



//////////////////////////////////////////////////////////
/////////// FILE & LINK DATA SCALING /////////////////////

// DATA RESOLUTION

;; All data in files and link is sent as integers,
;; but is actually a floating-point number.
;; To prevent loss of resolution, gaze position (in pixels)
;; and velocity (in degrees/second) are multiplied by
;; an integer value.  The value after multiplying must be +/-32000

	## screen_write_prescale <scalar>
	;; Screen pixels and resolution get prescaled
	;; (multiplied) by this value as they're sent
	;; to file and link as integers.
screen_write_prescale = 10;

	## velocity_write_prescale <scalar>
	;; velocity data in events gets prescaled
	;; (multiplied) by this value as they're sent
	;; to file and link as integers.
velocity_write_prescale = 10;


///////////////////////////////////////////////////////
////////////// FILE AND LINK EVENT DATA ///////////////

// EVENT TYPE FILTER (FILE AND LINK)

;; Messages are always enabled for the file
;; but must be selected for the link

;; Messages, buttons and input port changes
;; are collected at any time, eye events only while recording

	## file_event_filter <vargin>
	## link_event_filter <vargin>
	;; <vargin> = the data passed are in a list with these types:

		; LEFT     - events for one or both eyes (active_eye limits this for monocular)
		; RIGHT

		; FIXATION     - fixation start and end events
		; FIXUPDATE    - fixation (pursuit) state updates
		; SACCADE      - saccade start and end
		; BLINK        - blink start an end

		; MESSAGE      - messages (user notes in file)

		; BUTTON       - button 1..8 press or release
		; INPUT        - changes in input port lines


file_event_filter = LEFT,RIGHT,FIXATION,BLINK,MESSAGE,BUTTON,SACCADE,INPUT

link_event_filter = LEFT,RIGHT,FIXATION,BLINK,BUTTON,SACCADE



// EVENT DATA CONTENTS (FILE AND LINK)

;; the data passed are in a list with these types:

	## file_event_data <vargin>
	## link_event_data <vargin>
	;; <vargin> = the data passed are in a list with these types:

		; GAZE     - screen xy (gaze) position (pupil position for calibration)
		; GAZERES  - units-per-degree screen resolution (start, end of event)
		; HREF     - head-referenced gaze position
		; AREA     - pupil area
		; VELOCITY - velocity of parsed position-type (avg, peak)

		; STATUS   - warning and error flags, aggregated across event

		; FIXAVG   - include ONLY averages in fixation end events, to reduce file size
		; NOSTART  - start events have no data, just time stamp


file_event_data = GAZE,GAZERES,HREF,AREA,VELOCITY

link_event_data = GAZE,GAZERES,HREF,AREA,FIXAVG,NOSTART


// SAMPLE DATA CONTENTS (FILE AND LINK)

;; SAMPLE FILE/LINK DATA CONFIGURE
;;
;; These control what is included in the file
;; or transferred over the link

;; the data passed are in a list with these types:

	## file_sample_data <vargin>
	## link_sample_data <vargin>
	;; <vargin> = the data passed are in a list with these types:

		; LEFT     - data for one or both eyes (active_eye limits this for monocular)
		; RIGHT

		; GAZE     - screen xy (gaze) position
		; GAZERES  - units-per-degree screen resolution
		; HREF     - head-referenced gaze
		; PUPIL    - raw eye camera pupil coordinates
		; AREA     - pupil area
		; HTARGET  - head position data for EyeLink remote

		; STATUS   - warning and error flags
		; BUTTON   - button state and change flags
		; INPUT    - input port data lines

file_sample_data = LEFT,RIGHT,GAZE,GAZERES,PUPIL,HREF,AREA,STATUS,INPUT,HTARGET

link_sample_data = LEFT,RIGHT,GAZE,HREF,GAZERES,AREA,STATUS,HTARGET

	
	## record_data_defaults
	;; READ-ONLY
  	;; Returns the current record data defaults.
  	;; Return has 0 for off, 1 for on, and does not report link settings:
  	;; "<file samples> <file events> 0 0"
;; record_data_defaults



//SAMPLE WRITE INTERVAL CONTROL
	## file_sample_control = <output interval>,<movement threshold>,
	;;			 <minimum interval>
	## link_sample_control = <output interval>,<movement threshold>,
	;; 			 <minimum interval>
	;;
	;; we can control the base interval at which samples are written, 
	;; and write extra samples if the gaze position has moved 
	;; significantly since the last sample.  We can also limit how fast
	;; we put out these motion updates during a saccade.
	;;
	;; The first number is the time (msec) between base-rate sample 
	;; writes. 0 means we don't put out base rate samples, only motion 
	;; updates. The second number (float) is the gaze change in screen 
	;; units since the last sample needed to trigger a motion update. 
	;; 0.0 means we don't put out any motion updates. The third number 
	;; sets the minimum time between motion updates: 2 or less means 
	;; pass all.
file_sample_control = 1, 0.0, 0  
link_sample_control = 1, 0.0, 0           


	## link_update_interval = <time in msec>
	;; Maximum interval (in milliseconds) to send something to connected
	;; computer.  Any packet (data, image, etc) will do, but empty status
	;; packets will be sent if required.  This is critical for syncing 
	;; the tracker time estimate.  0 is off, else msec interval to send.
link_update_interval = 0


	## samples_between_timestamps = <count>
	;; By updating slowly-changing or predictable data items less 
	;; frequently, file size can be substantially reduced. Timestamps
	;; and status are ok, others should not be subsampled if reprocessing
	;; is needed.  We can send 4-byte timestamps or 1-byte sample time
	;; delta.  This allows us to mix them. 0 forces full timestamp
	;; on each sample.  Full timestamp is ALWAYS sent with link samples.
samples_between_timestamps = 10


	## samples_between_resolution = <count>
	;; This controls how often resolution data is included: 0 means that 
	;; it always included. 	
samples_between_resolution = 0


	## samples_between_status = <count>
	;; This controls how often error-flags (status) data is included:  
	;; 0 means always included.
samples_between_status = 0


	## samples_between_pupil_area = <count>
	;; This controls how often pupil area data is included: 
	;; 0 means always include.  
	;; Pupil area is ALWAYS output before/after blink.	
samples_between_pupil_area = 0


	## link_flush_age = <0, 1, or msec>
	;; Controls packing of samples into link data packets in record mode.
	;; The default of 1 minimizes data latency, with each sample (and any
	;; associated events) packed into a single buffer and sent 
	;; immediately.  A setting of 0 only flushes when the buffer is full
	;; (5 to 30 samples, depending on contents). Other settings are the
	;; maximum age of a sample before flushing.   For example, a setting 
	;; of 20 will ensure data is sent with a delay of 20 milliseconds or 
	;; less.  USES: packing samples reduces network traffic, making room
	;; for image and file transfer without dropping sample data.
link_flush_age = 1


	## link_motion_flush = <switch>
	;; We can send data whenever a link sample motion update occurs, or
	;; whenever the position has moved so far relative to the last sample
	;; sent to the remote PC that a motion update should have occurred
	;; (this is needed if baseline sample rate is high).  This is ideal
	;; for moving a gaze cursor on the remote PC.   
link_motion_flush = NO  ;; flush updates

	
	## link_sample_recency = <time in msec>
	;; Finally, we may want to add a sample to the buffer before sending
	;; it if the latest sample is too old. We specify the maximum age (in
	;; msec) of latest sample.
link_sample_recency = 1 ;; make sure we have recent data


	## link_pacing_usec = <microseconds between link image packets>
	;; Forces the Ethernet to wait between issuing packet send requests.
	;; The default is 0, for no pacing. If a client computer is being 
	;; flooded (dropping samples and packets) this may be useful. 
	;; However, it must be used with caution as it can greatly increase
	;; the number of samples delayed by 2 to 6 milliseconds during image 
	;; streaming.  Set to 50 to 100 less than the desired average packet 
	;; interval, 900 for windows (image and data simultaneously).
link_pacing_usec = 0


	## link_echo_filter = <list of tracker button and key events>
	;; A set of key and button events on the tracker may be sent to the 
	;; remote client to be logged or processed. 
	;; The event types in the list will be echoed: all others will be ignored.  
	;; Accepted types are:
	;; 	BUTTON: button press and release event
	;;	UP: key release events
	;;	DOWN: key press events
	;;	REPEAT: key repeat events
link_echo_filter = DOWN, REPEAT, BUTTONS


	## do_mode_start_flush = <switch>
	;; Whether to flush samples that were collected between the end of 
	;; one mode and the start of the next. 
	;; If not flushed, these samples (usually no more than 2) will appear
	;; at the start of the next mode's data.  These samples are likely 
	;; earlier than the time the mode change command was issued. 
do_mode_start_flush = ON


	## enable_file_buffer = <switch>
	;; Whether to buffer file data to memory. If true, data is buffered to memory
	;; and written to disk in between recordings. If false, data is written directly to disk.   
enable_file_buffer = ON
