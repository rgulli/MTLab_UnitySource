# EYELINK 1000 PLUS BUTTONS.INI FILE
# Created: August 28, 2013

# *** WARNING: DO NOT MODIFY THIS FILE DIRECTLY!!! PLEASE CUT AND PASTE   ***
# *** SELECTED COMMANDS TO FINAL.INI AND MAKE MODIFICATIONS IN THAT FILE! ***
# NOTE: some settings may be overridden by LASTRUN.INI

	## button_debounce_time = <delay>
	;; Sets button debounce time.  
	;; Button responds immediately to first change so delay does not add delay to RT. 
	;; Any change following this is ignored for number of milliseconds defined. 
	;; <delay>: debounce in milliseconds.
button_debounce_time = 30;
	
##BUTTON DEFINITION:
    ;; up to 32 buttons may be created
    ;;
    ;; values 1-8 are for subject i/o (logged as events)
    ;; value 0 deletes
    ;; 9-31 are available for remote control or functions
        
 ## Parallel Port PCIx card Settings
 write_ioport 8 0xE0         ; +5v pull-up source

 ## ResponsePixx Parallel Port box with adaptor dongle
 create_button 1 9 0x20 1    ; top button
 create_button 2 9 0x40 1    ; right button
 create_button 3 9 0x08 1    ; bottom button
 create_button 4 9 0x10 1    ; left button
 create_button 5 9 0x80 0    ; center button

 ## Gravis Destroyer gamepad
; create_button 1 9 0x20 1    ; blue button
; create_button 2 9 0x40 1    ; green button
; create_button 3 9 0x08 1    ; yellow button
; create_button 4 9 0x10 1    ; red button
; create_button 5 9 0x80 0    ; big (purple) button

## EyeLink Host PC Parallel Port
 write_ioport 0x378 0xE0         ; +5v pull-up source

 ## ResponsePixx VPX-ACC-3000 Parallel Port box with adaptor dongle
; create_button 1 0x379 0x20 1    ; top button
; create_button 2 0x379 0x40 1    ; right button
; create_button 3 0x379 0x08 1    ; bottom button
; create_button 4 0x379 0x10 1    ; left button
; create_button 5 0x379 0x80 0    ; center button

 ## LEDs
;  write_ioport 0x378 0x00 ; turn off all button LEDs
;  write_ioport 0x378 0x01 ; turn on top button (button 1)
;  write_ioport 0x378 0x02 ; turn on right button (button 2)
;  write_ioport 0x378 0x04 ; turn on bottom button (button 3)
;  write_ioport 0x378 0x08 ; turn on left button (button 4)
;  write_ioport 0x378 0x10 ; turn on center button (button 5)

 ## Gravis Destroyer gamepad
; create_button 1 0x379 0x20 1    ; blue button
; create_button 2 0x379 0x40 1    ; green button
; create_button 3 0x379 0x08 1    ; yellow button
; create_button 4 0x379 0x10 1    ; red button
; create_button 5 0x379 0x80 0    ; big (purple) button

#############################################################

## PRINTER PORT BUTTON SETTINGS
    ;; The printer port I/O lines support up to 5 buttons
    ;; Printer port bit is 0 for pressed (grounding switch)
	;;
	;; These are for custom 5-button pad on printer LPT1 port
        
    ## write_ioport <ioport> <data>
	;; Writes data to I/O port.  Useful to configure I/O cards. 
	;; 	<ioport>: byte hardware I/O port address
	;;	<data>: data to write
; write_ioport 0x378 0xFF         ; +5v pull-up source
         
    ## create_button <number> <port> <bitmask> <invert?>
	;; Defines a button to a bit in a hardware port. 
	;;	<button>: button number, 1 to 8
	;;	<ioport>: address of hardware port
	;;	<bitmask>: 8-bit mask ANDed with port to test button line
	;;	<inverted>: 1 if active-low, 0 if active-high
;; create_button 1 0x379 0x20 1    ; blue   button
;; create_button 2 0x379 0x40 1    ; red    button
;; create_button 3 0x379 0x08 1    ; green  button
;; create_button 4 0x379 0x10 1    ; yellow button
;; create_button 5 0x379 0x80 0    ; big (purple) button

    ;; GAME PORT BUTTON SETTINGS
    ;;  these are for dual-joystick game port
    ;;  normal game ports only sense 2 buttons
    ;;  port bit is 0 for pressed (grounding switch)
;; create_button 1 0x201 0x80 1    ; blue   button
;; create_button 2 0x201 0x40 1    ; red    button
;; create_button 3 0x201 0x20 1    ; green   button
;; create_button 4 0x201 0x10 1    ; yellow button


	;; BUTTON FUNCTIONS:
	;;  Buttons may be assigned to generate commands
    ;;  Give the button number (1-31) then the command string in quotes.
    ;;  The first command is executed when the button is pressed.
    ;;  The optional second command is executed when button is released.    
	;;  Giving NO strings deletes the button function
	##  button_function <button_number>
    ##  button_function <button_number> <press_command>
    ##  button_function <button_number> <press_command> <release_command>

	;; <button>: hardware button 1 to 8, key button 8 to 31
	;; <presscmd>: command to execute when button pressed
	;; <relcmd>: command to execute when button released
   	
   	;; This is an example of remote-controlled recording.
    ;;  Button 5 must be defined for a digital input.
	;;
;  button_function 5 "start_recording" "set_idle_mode"

    ;; Uncomment this for debugging buttons.
; button_function 1 "echo 'BUTTON 1 PRESSED'" "echo 'BUTTON 1 RELEASED'"
; button_function 2 "echo 'BUTTON 2 PRESSED'" "echo 'BUTTON 2 RELEASED'"
; button_function 3 "echo 'BUTTON 3 PRESSED'" "echo 'BUTTON 3 RELEASED'"
; button_function 4 "echo 'BUTTON 4 PRESSED'" "echo 'BUTTON 4 RELEASED'"
; button_function 5 "echo 'BUTTON 5 PRESSED'" "echo 'BUTTON 5 RELEASED'"
; button_function 6 "echo 'BUTTON 6 PRESSED'" "echo 'BUTTON 6 RELEASED'"
; button_function 7 "echo 'BUTTON 7 PRESSED'" "echo 'BUTTON 7 RELEASED'"
; button_function 8 "echo 'BUTTON 8 PRESSED'" "echo 'BUTTON 8 RELEASED'"


## DIGITAL INPUT PORT
	## input_data_ports <Port Address>
    ;; Up to 16 i/o lines can be reported.
    ;; These consist of 2 ports, (high and low byte)
    ;;
    ;;  Port: 2 or 3 are digital input card ports:
    ;;     2 = port A,   3 = port B
    ;;  Other values are address of hardware I/O port
    ;;
    ;;  If only 1 entry, 8-bit port (high byte)
input_data_ports = 9;

	## input_data_masks <Mask Hex Value>
    ;; Port bits can be masked so changes don't trigger events
input_data_masks = 0xFF;


    ## last_button_pressed = <optional value assignment>
	;; TYPE: Read/Write system variable 
	;; Contains the number of the last button pressed.  This was 
	;; intended for uses where a program would not be able to monitor 
	;; the eye tracker for long periods of time. It could set this to 0, 
	;; then read it later to see if it has changed.
last_button_pressed = 0


    ## clear_button_list
	;; WRITE		
	;; Clears the button history list (see "last_button_list").
;; clear_button_list


    ## last_button_list 
  	;; READ, WRITE
	;; Reads the list of buttons pressed since the list was last cleared.
	;; The button list is cleared when this command is issued (but not 
	;; when read). When read, returns a list of all buttons pressed.  The 
    ;; list consists of "<button_number> <button_time>" pairs.
;; last_button_list


	## read_ioport <ioport>
	;; Performs a dummy read of I/O port.  
	;; <ioport>: byte hardware I/O port address.  
;; read_ioport 0x379


	## button_status_display  <switch>
  	;; Enables button feedback display on output and Record mode screens
  	;; DEFAULT: ON
button_status_display = ON


